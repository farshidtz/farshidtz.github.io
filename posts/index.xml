<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Farshid Tavakolizadeh</title><link>https://farshid.ws/posts/</link><description>Recent content in Posts on Farshid Tavakolizadeh</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>© Farshid Tavakolizadeh</copyright><lastBuildDate>Fri, 16 Oct 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://farshid.ws/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Smartphone Position Detection Using Neural Networks</title><link>https://farshid.ws/posts/122/</link><pubDate>Fri, 16 Oct 2015 00:00:00 +0000</pubDate><guid>https://farshid.ws/posts/122/</guid><description>This project demonstrates an approach to detect common smart phone positions, including “In Hand”, “Side Pocket”, “In Handbag”, and “On Table (Idle)”. We apply sensor data fusion on a set of hardware- and software-based Android sensors. As a result, data entries containing sensor fusion features are classified individually, without looking at patterns. The overall system design and accuracy are presented using a Google Nexus 6 device.
The fully connected NN used for classification.</description></item><item><title>Freehand Circling for Object Selection Using a Head-mounted Camera</title><link>https://farshid.ws/posts/121/</link><pubDate>Tue, 05 Aug 2014 00:00:00 +0000</pubDate><guid>https://farshid.ws/posts/121/</guid><description>Baidu Eye is prototype head-mounted device with front facing camera. As a research intern in Baidu&amp;rsquo;s Institute of Deep Learning, I was responsible for developing a light algorithm that allows wearer to circle around things in his view using his pointing finger in order to select a specific object from a large scene. The selected item was then sent to Baidu&amp;rsquo;s image search API for object recognition.
This can be used for searching image of products, banners, logos, and even clipping a portion of an advertisement.</description></item><item><title>Locating Missing Items by Visual Remembrance</title><link>https://farshid.ws/posts/120/</link><pubDate>Thu, 31 Jul 2014 00:00:00 +0000</pubDate><guid>https://farshid.ws/posts/120/</guid><description>Finding missing items has always been troublesome. To tackle the hassle, several systems have been suggested; yet they are inflexible due to excessive setup time, operational cost, and effectiveness. We present Traceband; a lightweight and portable bracelet, which keeps track of every targeted commonly used object that a user interacts with. Users can find the location of missing items via a web-based software portal.
Bracelet with single-board computer and sensors Web app: Registerring personal items Web app: Locating lost item Publication Farshid Tavakolizadeh, Jiawei Gu, and Bahador Saket.</description></item><item><title>Interactive Tiles on Windows</title><link>https://farshid.ws/posts/119/</link><pubDate>Fri, 31 Jan 2014 00:00:00 +0000</pubDate><guid>https://farshid.ws/posts/119/</guid><description>In an effort to make Windows more touch-friendly, Microsoft introduced the Modern Design Language (Previously known as Metro UI). Starting from Windows 8.0, the new modern interface was added to the operating system, replacing (and in some cases, overlapping) the classic interface elements. The changes however reduced the usability of interface for larger screen and mouse users.
At the Human-Computer Interaction group of Microsoft Research, the design team joined forces to propose a wide range of improvements to make the modern interface richer and more closely coupled with the classic interface.</description></item><item><title>Parallel Convex-Hull solver</title><link>https://farshid.ws/posts/118/</link><pubDate>Fri, 25 Jan 2013 00:00:00 +0000</pubDate><guid>https://farshid.ws/posts/118/</guid><description>Based on the definition from Princeton, the convex hull of a set of points is:
Formally: It is the smallest convex set containing the points. Informally: It is a rubber band wrapped around the &amp;ldquo;outside&amp;rdquo; points. This application was designed to compare time complexity of convex hull problem in both parallel and sequential algorithms. The convex hull problem is solved based on the Graham&amp;rsquo;s scan algorithm.
Techniques Parallelization using OpenMPI in C++ Graphical visualization using C++ Graphics library (Linux) Comparison of execution time for 100, 1000, 10000 and 30000 points for MPI runs with 1 Machine 1 Process , 1 Machine 4 Processes and 2 Machines 8 Processes Source Code https://github.</description></item><item><title>2D Mapping Using an Autonomous Robot</title><link>https://farshid.ws/posts/115/</link><pubDate>Tue, 22 Jan 2013 00:00:00 +0000</pubDate><guid>https://farshid.ws/posts/115/</guid><description>This project represents a method for performing 2D mapping with a mobile robot on a single floor of a structure. The observation of an environment with the robot requires positioning and sensing systems which are associated with different types of errors.
The robot uses the differential drive movement system to navigate in an environment containing walls, edges and corners. The movement of robot is tracked with odometry and goes through Kalman Filter to get optimized estimations.</description></item><item><title>Battleship over the network</title><link>https://farshid.ws/posts/117/</link><pubDate>Fri, 18 Jan 2013 00:00:00 +0000</pubDate><guid>https://farshid.ws/posts/117/</guid><description>The Battleship game is played on four grids, two for each player. The grids are typically 10x10 square and the individual squares in the grid are identified by letter and number. On one grid the player arranges ships and records the shots by the opponent. On the other grid the player records his/her own shots.
Battleship over the network This application consists of two modules, the client side and the server side.</description></item><item><title>Random Crossword Puzzle</title><link>https://farshid.ws/posts/114/</link><pubDate>Thu, 06 Sep 2012 00:00:00 +0000</pubDate><guid>https://farshid.ws/posts/114/</guid><description>A crossword puzzle is a word puzzle in form of gird of shaded and empty squared. Each empty square can accept one letter from user which eventually forms rows and columns of words. Each word in the puzzle contains an equivalent clue that guides the user to an answer. Shaded squares are places to indicate blocked cells that cannot contain any character and are usually used to separate words from each other.</description></item><item><title>Self-driving Scout Rover</title><link>https://farshid.ws/posts/111/</link><pubDate>Mon, 23 Apr 2012 00:00:00 +0000</pubDate><guid>https://farshid.ws/posts/111/</guid><description>Concept: The strength of network signals (cellular, wifi, etc.) vary over time with respect to environmental changes. To ensure a reliable network coverage, service providers spend notable amound of resources to detect blackspots periodically. While relying on user feedbacks is not always an ideal solution due to their hardware specifications, autonomous vehicles can utilized to do the job.
This was a project sponsored by Intel to utilize the Intel® Atom™ Board D525MW in an embedded system.</description></item><item><title>cvPaint - Simple drawing using camera</title><link>https://farshid.ws/posts/112/</link><pubDate>Wed, 18 Jan 2012 00:00:00 +0000</pubDate><guid>https://farshid.ws/posts/112/</guid><description>cvPaint is an application which allows simple drawing using camera input. The key features include changing color, size, erasing and saving the image by holding a pointer on the available toolbars.
This application is developed in C++ using the well known OpenCV Library. The application demo and the list of all features are available below:
Control Features with Camera Changing the brush color Changing the brush thickness Clearing the screen Saving the image Closing the application Noise Handing Setting threshold for the maximum distance between two points Getting use of the pointer&amp;rsquo;s area to distinguish between the pointer itself and noises Using a 5x5 Median Filter to reduce the background noise Source Code https://github.</description></item><item><title>NXT FaceShooter</title><link>https://farshid.ws/posts/110/</link><pubDate>Fri, 15 Jul 2011 00:00:00 +0000</pubDate><guid>https://farshid.ws/posts/110/</guid><description>A Lego Mindstorm robot holding an Android phone is connected to a Windows PC via Bluetooth. The PC receives the phone&amp;rsquo;s camera feeds over WiFi and processes them using OpenCV to detect the human&amp;rsquo;s face. The obtained data is being used in a C++ application and the final commands will be transmitted to the NXT unit to do the shooting.
Techniques Robotic movement and sensing control via Bluetooth (Using Monobrick C++ Communication library for NXT) Wifi camera feeds streaming (Using IP Webcam Android app and MJPG-Streamer) Face detection using Haar classifiers (Using OpenCV library) Demo</description></item></channel></rss>